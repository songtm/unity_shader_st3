{
    "scope": "source.shader",
    "completions":
    [
        { "trigger": "LazarovFresnelTerm(F0,roughness,cosA)\tf", "contents": "LazarovFresnelTerm(${1:F0},${2:roughness},${3:cosA})"},
        { "trigger": "SebLagardeFresnelTerm(F0,roughness,cosA)\tf", "contents": "SebLagardeFresnelTerm(${1:F0},${2:roughness},${3:cosA})"},
        { "trigger": "CookTorranceVisibilityTerm(NdotL,NdotV,NdotH,VdotH)\tf", "contents": "CookTorranceVisibilityTerm(${1:NdotL},${2:NdotV},${3:NdotH},${4:VdotH})"},
        { "trigger": "KelemenVisibilityTerm(LdotH)\tf", "contents": "KelemenVisibilityTerm(${1:LdotH})"},
        { "trigger": "ModifiedKelemenVisibilityTerm(LdotH,perceptualRoughness)\tf", "contents": "ModifiedKelemenVisibilityTerm(${1:LdotH},${2:perceptualRoughness})"},
        { "trigger": "SmithGGXVisibilityTerm(NdotL,NdotV,perceptualRoughness)\tf", "contents": "SmithGGXVisibilityTerm(${1:NdotL},${2:NdotV},${3:perceptualRoughness})"},
        { "trigger": "ImplicitVisibilityTerm()\tf", "contents": "ImplicitVisibilityTerm()"},
        { "trigger": "RDFBlinnPhongNormalizedTerm(NdotH,n)\tf", "contents": "RDFBlinnPhongNormalizedTerm(${1:NdotH},${2:n})"},
        { "trigger": "DecodeHDR_NoLinearSupportInSM2(data,decodeInstructions)\tf", "contents": "DecodeHDR_NoLinearSupportInSM2(${1:data},${2:decodeInstructions})"},
        { "trigger": "DotClamped(a,b)\tf", "contents": "DotClamped(${1:a},${2:b})"},
        { "trigger": "LambertTerm(normal,lightDir)\tf", "contents": "LambertTerm(${1:normal},${2:lightDir})"},
        { "trigger": "BlinnTerm(normal,halfDir)\tf", "contents": "BlinnTerm(${1:normal},${2:halfDir})"},
        { "trigger": "RoughnessToSpecPower(roughness)\tf", "contents": "RoughnessToSpecPower(${1:roughness})"},
        { "trigger": "Unity_GlossyEnvironment()\tf", "contents": "Unity_GlossyEnvironment()"},
        { "trigger": "TexCoords(v)\tf", "contents": "TexCoords(${1:v})"},
        { "trigger": "DetailMask(uv)\tf", "contents": "DetailMask(${1:uv})"},
        { "trigger": "Albedo(texcoords)\tf", "contents": "Albedo(${1:texcoords})"},
        { "trigger": "Alpha(uv)\tf", "contents": "Alpha(${1:uv})"},
        { "trigger": "Occlusion(uv)\tf", "contents": "Occlusion(${1:uv})"},
        { "trigger": "SpecularGloss(uv)\tf", "contents": "SpecularGloss(${1:uv})"},
        { "trigger": "MetallicGloss(uv)\tf", "contents": "MetallicGloss(${1:uv})"},
        { "trigger": "Emission(uv)\tf", "contents": "Emission(${1:uv})"},
        { "trigger": "NormalInTangentSpace(texcoords)\tf", "contents": "NormalInTangentSpace(${1:texcoords})"},
        { "trigger": "Parallax(texcoords,viewDir)\tf", "contents": "Parallax(${1:texcoords},${2:viewDir})"},
        { "trigger": "MetallicSetup_Reflectivity()\tf", "contents": "MetallicSetup_Reflectivity()"},
        { "trigger": "SpecularSetup_Reflectivity()\tf", "contents": "SpecularSetup_Reflectivity()"},
        { "trigger": "TransformToTangentSpace(tangent,binormal,normal,v)\tf", "contents": "TransformToTangentSpace(${1:tangent},${2:binormal},${3:normal},${4:v})"},
        { "trigger": "TangentSpaceLightingInput(normalWorld,vTangent,lightDirWorld,eyeVecWorld,tangentSpaceLightDir,tangentSpaceEyeVec)\tf", "contents": "TangentSpaceLightingInput(${1:normalWorld},${2:vTangent},${3:lightDirWorld},${4:eyeVecWorld},${5:tangentSpaceLightDir},${6:tangentSpaceEyeVec})"},
        { "trigger": "vertForwardBaseSimple(v)\tf", "contents": "vertForwardBaseSimple(${1:v})"},
        { "trigger": "FragmentSetupSimple(i)\tf", "contents": "FragmentSetupSimple(${1:i})"},
        { "trigger": "MainLightSimple(i,s)\tf", "contents": "MainLightSimple(${1:i},${2:s})"},
        { "trigger": "PerVertexGrazingTerm(i,s)\tf", "contents": "PerVertexGrazingTerm(${1:i},${2:s})"},
        { "trigger": "PerVertexFresnelTerm(i)\tf", "contents": "PerVertexFresnelTerm(${1:i})"},
        { "trigger": "LightDirForSpecular(i,mainLight)\tf", "contents": "LightDirForSpecular(${1:i},${2:mainLight})"},
        { "trigger": "BRDF3DirectSimple(diffColor,specColor,smoothness,rl)\tf", "contents": "BRDF3DirectSimple(${1:diffColor},${2:specColor},${3:smoothness},${4:rl})"},
        { "trigger": "fragForwardBaseSimpleInternal(i)\tf", "contents": "fragForwardBaseSimpleInternal(${1:i})"},
        { "trigger": "fragForwardBaseSimple(i)\tf", "contents": "fragForwardBaseSimple(${1:i})"},
        { "trigger": "vertForwardAddSimple(v)\tf", "contents": "vertForwardAddSimple(${1:v})"},
        { "trigger": "FragmentSetupSimpleAdd(i)\tf", "contents": "FragmentSetupSimpleAdd(${1:i})"},
        { "trigger": "LightSpaceNormal(i,s)\tf", "contents": "LightSpaceNormal(${1:i},${2:s})"},
        { "trigger": "fragForwardAddSimpleInternal(i)\tf", "contents": "fragForwardAddSimpleInternal(${1:i})"},
        { "trigger": "fragForwardAddSimple(i)\tf", "contents": "fragForwardAddSimple(${1:i})"},
        { "trigger": "SpeedTreeVert(IN,OUT)\tf", "contents": "SpeedTreeVert(${1:IN},${2:OUT})"},
        { "trigger": "SpeedTreeFrag(IN,OUT)\tf", "contents": "SpeedTreeFrag(${1:IN},${2:OUT})"},
        { "trigger": "leaves(v)\tf", "contents": "leaves(${1:v})"},
        { "trigger": "bark(v)\tf", "contents": "bark(${1:v})"},
        { "trigger": "UnityGet2DClipping(position,clipRect)\tf", "contents": "UnityGet2DClipping(${1:position},${2:clipRect})"},
        { "trigger": "UnityGetUIDiffuseColor(position,mainTexture,alphaTexture,textureSampleAdd)\tf", "contents": "UnityGetUIDiffuseColor(${1:position},${2:mainTexture},${3:alphaTexture},${4:textureSampleAdd})"},
        { "trigger": "unitySampleShadow(shadowCoord)\tf", "contents": "unitySampleShadow(${1:shadowCoord})"},
        { "trigger": "UnitySpotCookie(LightCoord)\tf", "contents": "UnitySpotCookie(${1:LightCoord})"},
        { "trigger": "UnitySpotAttenuate(LightCoord)\tf", "contents": "UnitySpotAttenuate(${1:LightCoord})"},
        { "trigger": "PerceptualRoughnessToRoughness(perceptualRoughness)\tf", "contents": "PerceptualRoughnessToRoughness(${1:perceptualRoughness})"},
        { "trigger": "RoughnessToPerceptualRoughness(roughness)\tf", "contents": "RoughnessToPerceptualRoughness(${1:roughness})"},
        { "trigger": "SmoothnessToRoughness(smoothness)\tf", "contents": "SmoothnessToRoughness(${1:smoothness})"},
        { "trigger": "SmoothnessToPerceptualRoughness(smoothness)\tf", "contents": "SmoothnessToPerceptualRoughness(${1:smoothness})"},
        { "trigger": "Pow4(x)\tf", "contents": "Pow4(${1:x})"},
        { "trigger": "Pow5(x)\tf", "contents": "Pow5(${1:x})"},
        { "trigger": "FresnelTerm(F0,cosA)\tf", "contents": "FresnelTerm(${1:F0},${2:cosA})"},
        { "trigger": "FresnelLerp(F0,F90,cosA)\tf", "contents": "FresnelLerp(${1:F0},${2:F90},${3:cosA})"},
        { "trigger": "FresnelLerpFast(F0,F90,cosA)\tf", "contents": "FresnelLerpFast(${1:F0},${2:F90},${3:cosA})"},
        { "trigger": "DisneyDiffuse(NdotV,NdotL,LdotH,perceptualRoughness)\tf", "contents": "DisneyDiffuse(${1:NdotV},${2:NdotL},${3:LdotH},${4:perceptualRoughness})"},
        { "trigger": "SmithVisibilityTerm(NdotL,NdotV,k)\tf", "contents": "SmithVisibilityTerm(${1:NdotL},${2:NdotV},${3:k})"},
        { "trigger": "SmithBeckmannVisibilityTerm(NdotL,NdotV,roughness)\tf", "contents": "SmithBeckmannVisibilityTerm(${1:NdotL},${2:NdotV},${3:roughness})"},
        { "trigger": "SmithJointGGXVisibilityTerm(NdotL,NdotV,roughness)\tf", "contents": "SmithJointGGXVisibilityTerm(${1:NdotL},${2:NdotV},${3:roughness})"},
        { "trigger": "GGXTerm(NdotH,roughness)\tf", "contents": "GGXTerm(${1:NdotH},${2:roughness})"},
        { "trigger": "PerceptualRoughnessToSpecPower(perceptualRoughness)\tf", "contents": "PerceptualRoughnessToSpecPower(${1:perceptualRoughness})"},
        { "trigger": "NDFBlinnPhongNormalizedTerm(NdotH,n)\tf", "contents": "NDFBlinnPhongNormalizedTerm(${1:NdotH},${2:n})"},
        { "trigger": "GetSpecPowToMip(fSpecPow,nMips)\tf", "contents": "GetSpecPowToMip(${1:fSpecPow},${2:nMips})"},
        { "trigger": "Unity_SafeNormalize(inVec)\tf", "contents": "Unity_SafeNormalize(${1:inVec})"},
        { "trigger": "BRDF1_Unity_PBS(diffColor,specColor,oneMinusReflectivity,smoothness,normal,viewDir,light,gi)\tf", "contents": "BRDF1_Unity_PBS(${1:diffColor},${2:specColor},${3:oneMinusReflectivity},${4:smoothness},${5:normal},${6:viewDir},${7:light},${8:gi})"},
        { "trigger": "BRDF2_Unity_PBS(diffColor,specColor,oneMinusReflectivity,smoothness,normal,viewDir,light,gi)\tf", "contents": "BRDF2_Unity_PBS(${1:diffColor},${2:specColor},${3:oneMinusReflectivity},${4:smoothness},${5:normal},${6:viewDir},${7:light},${8:gi})"},
        { "trigger": "BRDF3_Direct(diffColor,specColor,rlPow4,smoothness)\tf", "contents": "BRDF3_Direct(${1:diffColor},${2:specColor},${3:rlPow4},${4:smoothness})"},
        { "trigger": "BRDF3_Indirect(diffColor,specColor,indirect,grazingTerm,fresnelTerm)\tf", "contents": "BRDF3_Indirect(${1:diffColor},${2:specColor},${3:indirect},${4:grazingTerm},${5:fresnelTerm})"},
        { "trigger": "BRDF3_Unity_PBS(diffColor,specColor,oneMinusReflectivity,smoothness,normal,viewDir,light,gi)\tf", "contents": "BRDF3_Unity_PBS(${1:diffColor},${2:specColor},${3:oneMinusReflectivity},${4:smoothness},${5:normal},${6:viewDir},${7:light},${8:gi})"},
        { "trigger": "LightingTreeLeaf(s,lightDir,viewDir,atten)\tf", "contents": "LightingTreeLeaf(${1:s},${2:lightDir},${3:viewDir},${4:atten})"},
        { "trigger": "ShadeTranslucentMainLight(vertex,normal)\tf", "contents": "ShadeTranslucentMainLight(${1:vertex},${2:normal})"},
        { "trigger": "ShadeTranslucentLights(vertex,normal)\tf", "contents": "ShadeTranslucentLights(${1:vertex},${2:normal})"},
        { "trigger": "TreeVertBark(v)\tf", "contents": "TreeVertBark(${1:v})"},
        { "trigger": "TreeVertLeaf(v)\tf", "contents": "TreeVertLeaf(${1:v})"},
        { "trigger": "UnitySampleShadowmap(shadowCoord)\tf", "contents": "UnitySampleShadowmap(${1:shadowCoord})"},
        { "trigger": "SampleCubeDistance(vec)\tf", "contents": "SampleCubeDistance(${1:vec})"},
        { "trigger": "MetallicSetup_ShadowGetOneMinusReflectivity(uv)\tf", "contents": "MetallicSetup_ShadowGetOneMinusReflectivity(${1:uv})"},
        { "trigger": "SpecularSetup_ShadowGetOneMinusReflectivity(uv)\tf", "contents": "SpecularSetup_ShadowGetOneMinusReflectivity(${1:uv})"},
        { "trigger": "vertShadowCaster(v,UNITY_STANDARD_USE_SHADOW_OUTPUT_STRUCT,o,float4)\tf", "contents": "vertShadowCaster(${1:v},${2:UNITY_STANDARD_USE_SHADOW_OUTPUT_STRUCT},${3:o},${4:float4})"},
        { "trigger": "fragShadowCaster(UNITY_STANDARD_USE_SHADOW_OUTPUT_STRUCT,i,UNITY_STANDARD_USE_DITHER_MASK,vpos)\tf", "contents": "fragShadowCaster(${1:UNITY_STANDARD_USE_SHADOW_OUTPUT_STRUCT},${2:i},${3:UNITY_STANDARD_USE_DITHER_MASK},${4:vpos})"},
        { "trigger": "ReverseBits32(bits)\tf", "contents": "ReverseBits32(${1:bits})"},
        { "trigger": "RadicalInverse_VdC(bits)\tf", "contents": "RadicalInverse_VdC(${1:bits})"},
        { "trigger": "Hammersley2d(i,maxSampleCount)\tf", "contents": "Hammersley2d(${1:i},${2:maxSampleCount})"},
        { "trigger": "Hash(s)\tf", "contents": "Hash(${1:s})"},
        { "trigger": "InitRandom(input)\tf", "contents": "InitRandom(${1:input})"},
        { "trigger": "GetLocalFrame(N,tangentX,tangentY)\tf", "contents": "GetLocalFrame(${1:N},${2:tangentX},${3:tangentY})"},
        { "trigger": "ImportanceSampleCosDir(u,N,tangentX,tangentY,L)\tf", "contents": "ImportanceSampleCosDir(${1:u},${2:N},${3:tangentX},${4:tangentY},${5:L})"},
        { "trigger": "ImportanceSampleGGXDir(u,V,N,tangentX,tangentY,roughness,H,L)\tf", "contents": "ImportanceSampleGGXDir(${1:u},${2:V},${3:N},${4:tangentX},${5:tangentY},${6:roughness},${7:H},${8:L})"},
        { "trigger": "ImportanceSampleLambert(u,N,tangentX,tangentY,L,NdotL,weightOverPdf)\tf", "contents": "ImportanceSampleLambert(${1:u},${2:N},${3:tangentX},${4:tangentY},${5:L},${6:NdotL},${7:weightOverPdf})"},
        { "trigger": "ImportanceSampleGGX(u,V,N,tangentX,tangentY,roughness,NdotV,L,VdotH,NdotL,weightOverPdf)\tf", "contents": "ImportanceSampleGGX(${1:u},${2:V},${3:N},${4:tangentX},${5:tangentY},${6:roughness},${7:NdotV},${8:L},${9:VdotH},${10:NdotL},${11:weightOverPdf})"},
        { "trigger": "IntegrateLambertDiffuseIBLRef(diffuseLighting)\tf", "contents": "IntegrateLambertDiffuseIBLRef(${1:diffuseLighting})"},
        { "trigger": "IntegrateDisneyDiffuseIBLRef(diffuseLighting)\tf", "contents": "IntegrateDisneyDiffuseIBLRef(${1:diffuseLighting})"},
        { "trigger": "IntegrateSpecularGGXIBLRef(specularLighting)\tf", "contents": "IntegrateSpecularGGXIBLRef(${1:specularLighting})"},
        { "trigger": "IntegrateDFG(V,N,roughness,sampleCount)\tf", "contents": "IntegrateDFG(${1:V},${2:N},${3:roughness},${4:sampleCount})"},
        { "trigger": "IntegrateLD()\tf", "contents": "IntegrateLD()"},
        { "trigger": "UnityGlossyEnvironmentSetup(Smoothness,worldViewDir,Normal,fresnel0)\tf", "contents": "UnityGlossyEnvironmentSetup(${1:Smoothness},${2:worldViewDir},${3:Normal},${4:fresnel0})"},
        { "trigger": "perceptualRoughnessToMipmapLevel(perceptualRoughness)\tf", "contents": "perceptualRoughnessToMipmapLevel(${1:perceptualRoughness})"},
        { "trigger": "mipmapLevelToPerceptualRoughness(mipmapLevel)\tf", "contents": "mipmapLevelToPerceptualRoughness(${1:mipmapLevel})"},
        { "trigger": "vert_deferred(vertex,normal)\tf", "contents": "vert_deferred(${1:vertex},${2:normal})"},
        { "trigger": "UnityDeferredComputeFadeDistance(wpos,z)\tf", "contents": "UnityDeferredComputeFadeDistance(${1:wpos},${2:z})"},
        { "trigger": "UnityDeferredComputeShadow(vec,fadeDist,uv)\tf", "contents": "UnityDeferredComputeShadow(${1:vec},${2:fadeDist},${3:uv})"},
        { "trigger": "UnityDeferredCalculateLightParams(i,outWorldPos,outUV,outLightDir,outAtten,outFadeDist)\tf", "contents": "UnityDeferredCalculateLightParams(${1:i},${2:outWorldPos},${3:outUV},${4:outLightDir},${5:outAtten},${6:outFadeDist})"},
        { "trigger": "SpecularStrength(specular)\tf", "contents": "SpecularStrength(${1:specular})"},
        { "trigger": "EnergyConservationBetweenDiffuseAndSpecular(albedo,specColor,oneMinusReflectivity)\tf", "contents": "EnergyConservationBetweenDiffuseAndSpecular(${1:albedo},${2:specColor},${3:oneMinusReflectivity})"},
        { "trigger": "OneMinusReflectivityFromMetallic(metallic)\tf", "contents": "OneMinusReflectivityFromMetallic(${1:metallic})"},
        { "trigger": "DiffuseAndSpecularFromMetallic(albedo,metallic,specColor,oneMinusReflectivity)\tf", "contents": "DiffuseAndSpecularFromMetallic(${1:albedo},${2:metallic},${3:specColor},${4:oneMinusReflectivity})"},
        { "trigger": "PreMultiplyAlpha(diffColor,alpha,oneMinusReflectivity,outModifiedAlpha)\tf", "contents": "PreMultiplyAlpha(${1:diffColor},${2:alpha},${3:oneMinusReflectivity},${4:outModifiedAlpha})"},
        { "trigger": "ParallaxOffset1Step(h,height,viewDir)\tf", "contents": "ParallaxOffset1Step(${1:h},${2:height},${3:viewDir})"},
        { "trigger": "LerpOneTo(b,t)\tf", "contents": "LerpOneTo(${1:b},${2:t})"},
        { "trigger": "LerpWhiteTo(b,t)\tf", "contents": "LerpWhiteTo(${1:b},${2:t})"},
        { "trigger": "UnpackScaleNormal(packednormal,bumpScale)\tf", "contents": "UnpackScaleNormal(${1:packednormal},${2:bumpScale})"},
        { "trigger": "BlendNormals(n1,n2)\tf", "contents": "BlendNormals(${1:n1},${2:n2})"},
        { "trigger": "CreateTangentToWorldPerVertex(normal,tangent,tangentSign)\tf", "contents": "CreateTangentToWorldPerVertex(${1:normal},${2:tangent},${3:tangentSign})"},
        { "trigger": "ShadeSHPerVertex(normal,ambient)\tf", "contents": "ShadeSHPerVertex(${1:normal},${2:ambient})"},
        { "trigger": "ShadeSHPerPixel(normal,ambient,worldPos)\tf", "contents": "ShadeSHPerPixel(${1:normal},${2:ambient},${3:worldPos})"},
        { "trigger": "BoxProjectedCubemapDirection(worldRefl,worldPos,cubemapCenter,boxMin,boxMax)\tf", "contents": "BoxProjectedCubemapDirection(${1:worldRefl},${2:worldPos},${3:cubemapCenter},${4:boxMin},${5:boxMax})"},
        { "trigger": "CalculateSurfaceGradient(n,dpdx,dpdy,dhdx,dhdy)\tf", "contents": "CalculateSurfaceGradient(${1:n},${2:dpdx},${3:dpdy},${4:dhdx},${5:dhdy})"},
        { "trigger": "PerturbNormal(n,dpdx,dpdy,dhdx,dhdy)\tf", "contents": "PerturbNormal(${1:n},${2:dpdx},${3:dpdy},${4:dhdx},${5:dhdy})"},
        { "trigger": "CalculateSurfaceNormal(position,normal,gradient,uv)\tf", "contents": "CalculateSurfaceNormal(${1:position},${2:normal},${3:gradient},${4:uv})"},
        { "trigger": "UnpackNormalFromFloat(fValue)\tf", "contents": "UnpackNormalFromFloat(${1:fValue})"},
        { "trigger": "CubicSmooth(vData)\tf", "contents": "CubicSmooth(${1:vData})"},
        { "trigger": "TriangleWave(vData)\tf", "contents": "TriangleWave(${1:vData})"},
        { "trigger": "TrigApproximate(vData)\tf", "contents": "TrigApproximate(${1:vData})"},
        { "trigger": "RotationMatrix(vAxis,fAngle)\tf", "contents": "RotationMatrix(${1:vAxis},${2:fAngle})"},
        { "trigger": "mul_float3x3_float3x3(mMatrixA,mMatrixB)\tf", "contents": "mul_float3x3_float3x3(${1:mMatrixA},${2:mMatrixB})"},
        { "trigger": "mul_float3x3_float3(mMatrix,vVector)\tf", "contents": "mul_float3x3_float3(${1:mMatrix},${2:vVector})"},
        { "trigger": "Roll(fCurrent,fMaxScale,fMinScale,fSpeed,fRipple,vPos,fTime,vRotatedWindVector)\tf", "contents": "Roll(${1:fCurrent},${2:fMaxScale},${3:fMinScale},${4:fSpeed},${5:fRipple},${6:vPos},${7:fTime},${8:vRotatedWindVector})"},
        { "trigger": "Twitch(vPos,fAmount,fSharpness,fTime)\tf", "contents": "Twitch(${1:vPos},${2:fAmount},${3:fSharpness},${4:fTime})"},
        { "trigger": "Oscillate(vPos,fTime,fOffset,fWeight,fWhip,bWhip,bRoll,bComplex,fTwitch,fTwitchFreqScale,vOscillations,vRotatedWindVector)\tf", "contents": "Oscillate(${1:vPos},${2:fTime},${3:fOffset},${4:fWeight},${5:fWhip},${6:bWhip},${7:bRoll},${8:bComplex},${9:fTwitch},${10:fTwitchFreqScale},${11:vOscillations},${12:vRotatedWindVector})"},
        { "trigger": "Turbulence(fTime,fOffset,fGlobalTime,fTurbulence)\tf", "contents": "Turbulence(${1:fTime},${2:fOffset},${3:fGlobalTime},${4:fTurbulence})"},
        { "trigger": "GlobalWind(vPos,vInstancePos,bPreserveShape,vRotatedWindVector,time)\tf", "contents": "GlobalWind(${1:vPos},${2:vInstancePos},${3:bPreserveShape},${4:vRotatedWindVector},${5:time})"},
        { "trigger": "SimpleBranchWind(vPos,vInstancePos,fWeight,fOffset,fTime,fDistance,fTwitch,fTwitchScale,fWhip,bWhip,bRoll,bComplex,vRotatedWindVector)\tf", "contents": "SimpleBranchWind(${1:vPos},${2:vInstancePos},${3:fWeight},${4:fOffset},${5:fTime},${6:fDistance},${7:fTwitch},${8:fTwitchScale},${9:fWhip},${10:bWhip},${11:bRoll},${12:bComplex},${13:vRotatedWindVector})"},
        { "trigger": "DirectionalBranchWind(vPos,vInstancePos,fWeight,fOffset,fTime,fDistance,fTurbulence,fAdherence,fTwitch,fTwitchScale,fWhip,bWhip,bRoll,bComplex,bTurbulence,vRotatedWindVector)\tf", "contents": "DirectionalBranchWind(${1:vPos},${2:vInstancePos},${3:fWeight},${4:fOffset},${5:fTime},${6:fDistance},${7:fTurbulence},${8:fAdherence},${9:fTwitch},${10:fTwitchScale},${11:fWhip},${12:bWhip},${13:bRoll},${14:bComplex},${15:bTurbulence},${16:vRotatedWindVector})"},
        { "trigger": "DirectionalBranchWindFrondStyle(vPos,vInstancePos,fWeight,fOffset,fTime,fDistance,fTurbulence,fAdherence,fTwitch,fTwitchScale,fWhip,bWhip,bRoll,bComplex,bTurbulence,vRotatedWindVector,vRotatedBranchAnchor)\tf", "contents": "DirectionalBranchWindFrondStyle(${1:vPos},${2:vInstancePos},${3:fWeight},${4:fOffset},${5:fTime},${6:fDistance},${7:fTurbulence},${8:fAdherence},${9:fTwitch},${10:fTwitchScale},${11:fWhip},${12:bWhip},${13:bRoll},${14:bComplex},${15:bTurbulence},${16:vRotatedWindVector},${17:vRotatedBranchAnchor})"},
        { "trigger": "BranchWind(isPalmWind,vPos,vInstancePos,vWindData,vRotatedWindVector,vRotatedBranchAnchor)\tf", "contents": "BranchWind(${1:isPalmWind},${2:vPos},${3:vInstancePos},${4:vWindData},${5:vRotatedWindVector},${6:vRotatedBranchAnchor})"},
        { "trigger": "LeafRipple(vPos,vDirection,fScale,fPackedRippleDir,fTime,fAmount,bDirectional,fTrigOffset)\tf", "contents": "LeafRipple(${1:vPos},${2:vDirection},${3:fScale},${4:fPackedRippleDir},${5:fTime},${6:fAmount},${7:bDirectional},${8:fTrigOffset})"},
        { "trigger": "LeafTumble(vPos,vDirection,fScale,vAnchor,vGrowthDir,fTrigOffset,fTime,fFlip,fTwist,fAdherence,vTwitch,vRoll,bTwitch,bRoll,vRotatedWindVector)\tf", "contents": "LeafTumble(${1:vPos},${2:vDirection},${3:fScale},${4:vAnchor},${5:vGrowthDir},${6:fTrigOffset},${7:fTime},${8:fFlip},${9:fTwist},${10:fAdherence},${11:vTwitch},${12:vRoll},${13:bTwitch},${14:bRoll},${15:vRotatedWindVector})"},
        { "trigger": "LeafWind(isBestWind,bLeaf2,vPos,vDirection,fScale,vAnchor,fPackedGrowthDir,fPackedRippleDir,fRippleTrigOffset,vRotatedWindVector)\tf", "contents": "LeafWind(${1:isBestWind},${2:bLeaf2},${3:vPos},${4:vDirection},${5:fScale},${6:vAnchor},${7:fPackedGrowthDir},${8:fPackedRippleDir},${9:fRippleTrigOffset},${10:vRotatedWindVector})"},
        { "trigger": "RippleFrondOneSided(vPos,vDirection,fU,fV,fRippleScale,WIND_EFFECT_FROND_RIPPLE_ADJUST_LIGHTING,vBinormal,vTangent)\tf", "contents": "RippleFrondOneSided(${1:vPos},${2:vDirection},${3:fU},${4:fV},${5:fRippleScale},${6:WIND_EFFECT_FROND_RIPPLE_ADJUST_LIGHTING},${7:vBinormal},${8:vTangent})"},
        { "trigger": "RippleFrondTwoSided(vPos,vDirection,fU,fLengthPercent,fPackedRippleDir,fRippleScale,WIND_EFFECT_FROND_RIPPLE_ADJUST_LIGHTING,vBinormal,vTangent)\tf", "contents": "RippleFrondTwoSided(${1:vPos},${2:vDirection},${3:fU},${4:fLengthPercent},${5:fPackedRippleDir},${6:fRippleScale},${7:WIND_EFFECT_FROND_RIPPLE_ADJUST_LIGHTING},${8:vBinormal},${9:vTangent})"},
        { "trigger": "RippleFrond(vPos,vDirection,fU,fV,fPackedRippleDir,fRippleScale,fLenghtPercent,WIND_EFFECT_FROND_RIPPLE_ADJUST_LIGHTING,vBinormal,vTangent)\tf", "contents": "RippleFrond(${1:vPos},${2:vDirection},${3:fU},${4:fV},${5:fPackedRippleDir},${6:fRippleScale},${7:fLenghtPercent},${8:WIND_EFFECT_FROND_RIPPLE_ADJUST_LIGHTING},${9:vBinormal},${10:vTangent})"},
        { "trigger": "NormalizePerVertexNormal(n)\tf", "contents": "NormalizePerVertexNormal(${1:n})"},
        { "trigger": "NormalizePerPixelNormal(n)\tf", "contents": "NormalizePerPixelNormal(${1:n})"},
        { "trigger": "MainLight()\tf", "contents": "MainLight()"},
        { "trigger": "AdditiveLight(lightDir,atten)\tf", "contents": "AdditiveLight(${1:lightDir},${2:atten})"},
        { "trigger": "DummyLight()\tf", "contents": "DummyLight()"},
        { "trigger": "ZeroIndirect()\tf", "contents": "ZeroIndirect()"},
        { "trigger": "WorldNormal(tan2world)\tf", "contents": "WorldNormal(${1:tan2world})"},
        { "trigger": "PerPixelWorldNormal(i_tex,tangentToWorld)\tf", "contents": "PerPixelWorldNormal(${1:i_tex},${2:tangentToWorld})"},
        { "trigger": "SpecularSetup(i_tex)\tf", "contents": "SpecularSetup(${1:i_tex})"},
        { "trigger": "MetallicSetup(i_tex)\tf", "contents": "MetallicSetup(${1:i_tex})"},
        { "trigger": "FragmentSetup(i_tex,i_eyeVec,i_viewDirForParallax,tangentToWorld,i_posWorld)\tf", "contents": "FragmentSetup(${1:i_tex},${2:i_eyeVec},${3:i_viewDirForParallax},${4:tangentToWorld},${5:i_posWorld})"},
        { "trigger": "FragmentGI(s,occlusion,i_ambientOrLightmapUV,atten,light,reflections)\tf", "contents": "FragmentGI(${1:s},${2:occlusion},${3:i_ambientOrLightmapUV},${4:atten},${5:light},${6:reflections})"},
        { "trigger": "OutputForward(output,alphaFromSurface)\tf", "contents": "OutputForward(${1:output},${2:alphaFromSurface})"},
        { "trigger": "VertexGIForward(v,posWorld,normalWorld)\tf", "contents": "VertexGIForward(${1:v},${2:posWorld},${3:normalWorld})"},
        { "trigger": "vertForwardBase(v)\tf", "contents": "vertForwardBase(${1:v})"},
        { "trigger": "fragForwardBaseInternal(i)\tf", "contents": "fragForwardBaseInternal(${1:i})"},
        { "trigger": "fragForwardBase(i)\tf", "contents": "fragForwardBase(${1:i})"},
        { "trigger": "vertForwardAdd(v)\tf", "contents": "vertForwardAdd(${1:v})"},
        { "trigger": "fragForwardAddInternal(i)\tf", "contents": "fragForwardAddInternal(${1:i})"},
        { "trigger": "fragForwardAdd(i)\tf", "contents": "fragForwardAdd(${1:i})"},
        { "trigger": "vertDeferred(v)\tf", "contents": "vertDeferred(${1:v})"},
        { "trigger": "fragDeferred(i,outGBuffer0,outGBuffer1,outGBuffer2,outEmission)\tf", "contents": "fragDeferred(${1:i},${2:outGBuffer0},${3:outGBuffer1},${4:outGBuffer2},${5:outEmission})"},
        { "trigger": "DecodeDirectionalSpecularLightmap(color,dirTex,normalWorld,isRealtimeLightmap,realtimeNormalTex,o_light)\tf", "contents": "DecodeDirectionalSpecularLightmap(${1:color},${2:dirTex},${3:normalWorld},${4:isRealtimeLightmap},${5:realtimeNormalTex},${6:o_light})"},
        { "trigger": "MixLightmapWithRealtimeAttenuation(lightmap,attenuation,bakedColorTex,normalWorld)\tf", "contents": "MixLightmapWithRealtimeAttenuation(${1:lightmap},${2:attenuation},${3:bakedColorTex},${4:normalWorld})"},
        { "trigger": "ResetUnityLight(outLight)\tf", "contents": "ResetUnityLight(${1:outLight})"},
        { "trigger": "ResetUnityGI(outGI)\tf", "contents": "ResetUnityGI(${1:outGI})"},
        { "trigger": "UnityGI_Base(data,occlusion,normalWorld)\tf", "contents": "UnityGI_Base(${1:data},${2:occlusion},${3:normalWorld})"},
        { "trigger": "UnityGI_IndirectSpecular(data,occlusion,glossIn)\tf", "contents": "UnityGI_IndirectSpecular(${1:data},${2:occlusion},${3:glossIn})"},
        { "trigger": "UnityGlobalIllumination(data,occlusion,normalWorld)\tf", "contents": "UnityGlobalIllumination(${1:data},${2:occlusion},${3:normalWorld})"},
        { "trigger": "OffsetSpeedTreeVertex(data,lodValue)\tf", "contents": "OffsetSpeedTreeVertex(${1:data},${2:lodValue})"},
        { "trigger": "SplatmapVert(v,data)\tf", "contents": "SplatmapVert(${1:v},${2:data})"},
        { "trigger": "SplatmapMix(IN,defaultAlpha,splat_control,weight,mixedDiffuse,mixedNormal)\tf", "contents": "SplatmapMix(${1:IN},${2:defaultAlpha},${3:splat_control},${4:weight},${5:mixedDiffuse},${6:mixedNormal})"},
        { "trigger": "SplatmapFinalColor(IN,o,color)\tf", "contents": "SplatmapFinalColor(${1:IN},${2:o},${3:color})"},
        { "trigger": "SplatmapFinalPrepass(IN,o,normalSpec)\tf", "contents": "SplatmapFinalPrepass(${1:IN},${2:o},${3:normalSpec})"},
        { "trigger": "SplatmapFinalGBuffer(IN,o,outGBuffer0,outGBuffer1,outGBuffer2,emission)\tf", "contents": "SplatmapFinalGBuffer(${1:IN},${2:o},${3:outGBuffer0},${4:outGBuffer1},${5:outGBuffer2},${6:emission})"},
        { "trigger": "UnityStandardDataToGbuffer(data,outGBuffer0,outGBuffer1,outGBuffer2)\tf", "contents": "UnityStandardDataToGbuffer(${1:data},${2:outGBuffer0},${3:outGBuffer1},${4:outGBuffer2})"},
        { "trigger": "UnityStandardDataFromGbuffer(inGBuffer0,inGBuffer1,inGBuffer2)\tf", "contents": "UnityStandardDataFromGbuffer(${1:inGBuffer0},${2:inGBuffer1},${3:inGBuffer2})"},
        { "trigger": "UnityStandardDataApplyWeightToGbuffer(inOutGBuffer0,inOutGBuffer1,inOutGBuffer2,alpha)\tf", "contents": "UnityStandardDataApplyWeightToGbuffer(${1:inOutGBuffer0},${2:inOutGBuffer1},${3:inOutGBuffer2},${4:alpha})"},
        { "trigger": "vert_meta(v)\tf", "contents": "vert_meta(${1:v})"},
        { "trigger": "UnityLightmappingAlbedo(diffuse,specular,smoothness)\tf", "contents": "UnityLightmappingAlbedo(${1:diffuse},${2:specular},${3:smoothness})"},
        { "trigger": "frag_meta(i)\tf", "contents": "frag_meta(${1:i})"},
        { "trigger": "CBUFFER_START()\tf", "contents": "CBUFFER_START()"},
        { "trigger": "SpeedTreeBillboardVert(IN,OUT)\tf", "contents": "SpeedTreeBillboardVert(${1:IN},${2:OUT})"},
        { "trigger": "UnityLambertLight(s,light)\tf", "contents": "UnityLambertLight(${1:s},${2:light})"},
        { "trigger": "LightingLambert(s,gi)\tf", "contents": "LightingLambert(${1:s},${2:gi})"},
        { "trigger": "LightingLambert_Deferred(s,gi,outGBuffer0,outGBuffer1,outGBuffer2)\tf", "contents": "LightingLambert_Deferred(${1:s},${2:gi},${3:outGBuffer0},${4:outGBuffer1},${5:outGBuffer2})"},
        { "trigger": "LightingLambert_GI(s,data,gi)\tf", "contents": "LightingLambert_GI(${1:s},${2:data},${3:gi})"},
        { "trigger": "LightingLambert_PrePass(s,light)\tf", "contents": "LightingLambert_PrePass(${1:s},${2:light})"},
        { "trigger": "UnityBlinnPhongLight(s,viewDir,light)\tf", "contents": "UnityBlinnPhongLight(${1:s},${2:viewDir},${3:light})"},
        { "trigger": "LightingBlinnPhong(s,viewDir,gi)\tf", "contents": "LightingBlinnPhong(${1:s},${2:viewDir},${3:gi})"},
        { "trigger": "LightingBlinnPhong_Deferred(s,viewDir,gi,outGBuffer0,outGBuffer1,outGBuffer2)\tf", "contents": "LightingBlinnPhong_Deferred(${1:s},${2:viewDir},${3:gi},${4:outGBuffer0},${5:outGBuffer1},${6:outGBuffer2})"},
        { "trigger": "LightingBlinnPhong_GI(s,data,gi)\tf", "contents": "LightingBlinnPhong_GI(${1:s},${2:data},${3:gi})"},
        { "trigger": "LightingBlinnPhong_PrePass(s,light)\tf", "contents": "LightingBlinnPhong_PrePass(${1:s},${2:light})"},
        { "trigger": "DirLightmapDiffuse(dirBasis,color,scale,normal,surfFuncWritesNormal,scalePerBasisVector)\tf", "contents": "DirLightmapDiffuse(${1:dirBasis},${2:color},${3:scale},${4:normal},${5:surfFuncWritesNormal},${6:scalePerBasisVector})"},
        { "trigger": "UnityCalcDistanceTessFactor(vertex,minDist,maxDist,tess)\tf", "contents": "UnityCalcDistanceTessFactor(${1:vertex},${2:minDist},${3:maxDist},${4:tess})"},
        { "trigger": "UnityCalcTriEdgeTessFactors(triVertexFactors)\tf", "contents": "UnityCalcTriEdgeTessFactors(${1:triVertexFactors})"},
        { "trigger": "UnityCalcEdgeTessFactor(wpos0,wpos1,edgeLen)\tf", "contents": "UnityCalcEdgeTessFactor(${1:wpos0},${2:wpos1},${3:edgeLen})"},
        { "trigger": "UnityDistanceFromPlane(pos,plane)\tf", "contents": "UnityDistanceFromPlane(${1:pos},${2:plane})"},
        { "trigger": "UnityWorldViewFrustumCull(wpos0,wpos1,wpos2,cullEps)\tf", "contents": "UnityWorldViewFrustumCull(${1:wpos0},${2:wpos1},${3:wpos2},${4:cullEps})"},
        { "trigger": "UnityDistanceBasedTess(v0,v1,v2,minDist,maxDist,tess)\tf", "contents": "UnityDistanceBasedTess(${1:v0},${2:v1},${3:v2},${4:minDist},${5:maxDist},${6:tess})"},
        { "trigger": "UnityEdgeLengthBasedTess(v0,v1,v2,edgeLength)\tf", "contents": "UnityEdgeLengthBasedTess(${1:v0},${2:v1},${3:v2},${4:edgeLength})"},
        { "trigger": "UnityEdgeLengthBasedTessCull(v0,v1,v2,edgeLength,maxDisplacement)\tf", "contents": "UnityEdgeLengthBasedTessCull(${1:v0},${2:v1},${3:v2},${4:edgeLength},${5:maxDisplacement})"},
        { "trigger": "FastSinCos(val,s,c)\tf", "contents": "FastSinCos(${1:val},${2:s},${3:c})"},
        { "trigger": "TerrainWaveGrass(vertex,waveAmount,color)\tf", "contents": "TerrainWaveGrass(${1:vertex},${2:waveAmount},${3:color})"},
        { "trigger": "TerrainBillboardGrass(pos,offset)\tf", "contents": "TerrainBillboardGrass(${1:pos},${2:offset})"},
        { "trigger": "WavingGrassVert(v)\tf", "contents": "WavingGrassVert(${1:v})"},
        { "trigger": "WavingGrassBillboardVert(v)\tf", "contents": "WavingGrassBillboardVert(${1:v})"},
        { "trigger": "Squash(pos)\tf", "contents": "Squash(${1:pos})"},
        { "trigger": "TerrainAnimateTree(pos,alpha)\tf", "contents": "TerrainAnimateTree(${1:pos},${2:alpha})"},
        { "trigger": "TerrainBillboardTree(pos,offset,offsetz)\tf", "contents": "TerrainBillboardTree(${1:pos},${2:offset},${3:offsetz})"},
        { "trigger": "ExpandBillboard(mat,pos,normal,tangent)\tf", "contents": "ExpandBillboard(${1:mat},${2:pos},${3:normal},${4:tangent})"},
        { "trigger": "SmoothCurve(x)\tf", "contents": "SmoothCurve(${1:x})"},
        { "trigger": "SmoothTriangleWave(x)\tf", "contents": "SmoothTriangleWave(${1:x})"},
        { "trigger": "AnimateVertex(pos,normal,animParams)\tf", "contents": "AnimateVertex(${1:pos},${2:normal},${3:animParams})"},
        { "trigger": "BRDF_Unity_Indirect(baseColor,specColor,oneMinusReflectivity,smoothness,normal,viewDir,occlusion,gi)\tf", "contents": "BRDF_Unity_Indirect(${1:baseColor},${2:specColor},${3:oneMinusReflectivity},${4:smoothness},${5:normal},${6:viewDir},${7:occlusion},${8:gi})"},
        { "trigger": "LightingStandard(s,viewDir,gi)\tf", "contents": "LightingStandard(${1:s},${2:viewDir},${3:gi})"},
        { "trigger": "LightingStandard_Deferred(s,viewDir,gi,outGBuffer0,outGBuffer1,outGBuffer2)\tf", "contents": "LightingStandard_Deferred(${1:s},${2:viewDir},${3:gi},${4:outGBuffer0},${5:outGBuffer1},${6:outGBuffer2})"},
        { "trigger": "LightingStandard_GI(s,data,gi)\tf", "contents": "LightingStandard_GI(${1:s},${2:data},${3:gi})"},
        { "trigger": "LightingStandardSpecular(s,viewDir,gi)\tf", "contents": "LightingStandardSpecular(${1:s},${2:viewDir},${3:gi})"},
        { "trigger": "LightingStandardSpecular_Deferred(s,viewDir,gi,outGBuffer0,outGBuffer1,outGBuffer2)\tf", "contents": "LightingStandardSpecular_Deferred(${1:s},${2:viewDir},${3:gi},${4:outGBuffer0},${5:outGBuffer1},${6:outGBuffer2})"},
        { "trigger": "LightingStandardSpecular_GI(s,data,gi)\tf", "contents": "LightingStandardSpecular_GI(${1:s},${2:data},${3:gi})"},
        { "trigger": "UnityMetaVertexPosition(vertex,uv1,uv2,lightmapST,dynlightmapST)\tf", "contents": "UnityMetaVertexPosition(${1:vertex},${2:uv1},${3:uv2},${4:lightmapST},${5:dynlightmapST})"},
        { "trigger": "UnityMetaFragment(IN)\tf", "contents": "UnityMetaFragment(${1:IN})"},
        { "trigger": "IsGammaSpace()\tf", "contents": "IsGammaSpace()"},
        { "trigger": "GammaToLinearSpaceExact(value)\tf", "contents": "GammaToLinearSpaceExact(${1:value})"},
        { "trigger": "GammaToLinearSpace(sRGB)\tf", "contents": "GammaToLinearSpace(${1:sRGB})"},
        { "trigger": "LinearToGammaSpaceExact(value)\tf", "contents": "LinearToGammaSpaceExact(${1:value})"},
        { "trigger": "LinearToGammaSpace(linRGB)\tf", "contents": "LinearToGammaSpace(${1:linRGB})"},
        { "trigger": "UnityObjectToClipPos(pos)\tf", "contents": "UnityObjectToClipPos(${1:pos})"},
        { "trigger": "UnityWorldToClipPos(pos)\tf", "contents": "UnityWorldToClipPos(${1:pos})"},
        { "trigger": "UnityViewToClipPos(pos)\tf", "contents": "UnityViewToClipPos(${1:pos})"},
        { "trigger": "UnityObjectToViewPos(pos)\tf", "contents": "UnityObjectToViewPos(${1:pos})"},
        { "trigger": "UnityWorldToViewPos(pos)\tf", "contents": "UnityWorldToViewPos(${1:pos})"},
        { "trigger": "UnityObjectToWorldDir(dir)\tf", "contents": "UnityObjectToWorldDir(${1:dir})"},
        { "trigger": "UnityWorldToObjectDir(dir)\tf", "contents": "UnityWorldToObjectDir(${1:dir})"},
        { "trigger": "UnityObjectToWorldNormal(norm)\tf", "contents": "UnityObjectToWorldNormal(${1:norm})"},
        { "trigger": "UnityWorldSpaceLightDir(worldPos)\tf", "contents": "UnityWorldSpaceLightDir(${1:worldPos})"},
        { "trigger": "WorldSpaceLightDir(localPos)\tf", "contents": "WorldSpaceLightDir(${1:localPos})"},
        { "trigger": "ObjSpaceLightDir(v)\tf", "contents": "ObjSpaceLightDir(${1:v})"},
        { "trigger": "UnityWorldSpaceViewDir(worldPos)\tf", "contents": "UnityWorldSpaceViewDir(${1:worldPos})"},
        { "trigger": "WorldSpaceViewDir(localPos)\tf", "contents": "WorldSpaceViewDir(${1:localPos})"},
        { "trigger": "ObjSpaceViewDir(v)\tf", "contents": "ObjSpaceViewDir(${1:v})"},
        { "trigger": "Shade4PointLights(lightPosX,lightPosY,lightPosZ,lightColor0,lightColor1,lightColor2,lightColor3,lightAttenSq,pos,normal)\tf", "contents": "Shade4PointLights(${1:lightPosX},${2:lightPosY},${3:lightPosZ},${4:lightColor0},${5:lightColor1},${6:lightColor2},${7:lightColor3},${8:lightAttenSq},${9:pos},${10:normal})"},
        { "trigger": "ShadeVertexLightsFull(vertex,normal,lightCount,spotLight)\tf", "contents": "ShadeVertexLightsFull(${1:vertex},${2:normal},${3:lightCount},${4:spotLight})"},
        { "trigger": "ShadeVertexLights(vertex,normal)\tf", "contents": "ShadeVertexLights(${1:vertex},${2:normal})"},
        { "trigger": "SHEvalLinearL0L1(normal)\tf", "contents": "SHEvalLinearL0L1(${1:normal})"},
        { "trigger": "SHEvalLinearL2(normal)\tf", "contents": "SHEvalLinearL2(${1:normal})"},
        { "trigger": "ShadeSH9(normal)\tf", "contents": "ShadeSH9(${1:normal})"},
        { "trigger": "ShadeSH3Order(normal)\tf", "contents": "ShadeSH3Order(${1:normal})"},
        { "trigger": "SHEvalLinearL0L1_SampleProbeVolume(normal,worldPos)\tf", "contents": "SHEvalLinearL0L1_SampleProbeVolume(${1:normal},${2:worldPos})"},
        { "trigger": "ShadeSH12Order(normal)\tf", "contents": "ShadeSH12Order(${1:normal})"},
        { "trigger": "VertexLight(i,mainTex)\tf", "contents": "VertexLight(${1:i},${2:mainTex})"},
        { "trigger": "ParallaxOffset(h,height,viewDir)\tf", "contents": "ParallaxOffset(${1:h},${2:height},${3:viewDir})"},
        { "trigger": "Luminance(rgb)\tf", "contents": "Luminance(${1:rgb})"},
        { "trigger": "LinearRgbToLuminance(linearRgb)\tf", "contents": "LinearRgbToLuminance(${1:linearRgb})"},
        { "trigger": "UnityEncodeRGBM(rgb,maxRGBM)\tf", "contents": "UnityEncodeRGBM(${1:rgb},${2:maxRGBM})"},
        { "trigger": "DecodeHDR(data,decodeInstructions)\tf", "contents": "DecodeHDR(${1:data},${2:decodeInstructions})"},
        { "trigger": "DecodeLightmapRGBM(data,decodeInstructions)\tf", "contents": "DecodeLightmapRGBM(${1:data},${2:decodeInstructions})"},
        { "trigger": "DecodeLightmapDoubleLDR(color)\tf", "contents": "DecodeLightmapDoubleLDR(${1:color})"},
        { "trigger": "DecodeLightmap(color)\tf", "contents": "DecodeLightmap(${1:color})"},
        { "trigger": "DecodeRealtimeLightmap(color)\tf", "contents": "DecodeRealtimeLightmap(${1:color})"},
        { "trigger": "DecodeDirectionalLightmap(color,dirTex,normalWorld)\tf", "contents": "DecodeDirectionalLightmap(${1:color},${2:dirTex},${3:normalWorld})"},
        { "trigger": "MultiplyUV(mat,inUV)\tf", "contents": "MultiplyUV(${1:mat},${2:inUV})"},
        { "trigger": "vert_img(v)\tf", "contents": "vert_img(${1:v})"},
        { "trigger": "EncodeFloatRGBA(v)\tf", "contents": "EncodeFloatRGBA(${1:v})"},
        { "trigger": "DecodeFloatRGBA(enc)\tf", "contents": "DecodeFloatRGBA(${1:enc})"},
        { "trigger": "EncodeFloatRG(v)\tf", "contents": "EncodeFloatRG(${1:v})"},
        { "trigger": "DecodeFloatRG(enc)\tf", "contents": "DecodeFloatRG(${1:enc})"},
        { "trigger": "EncodeViewNormalStereo(n)\tf", "contents": "EncodeViewNormalStereo(${1:n})"},
        { "trigger": "DecodeViewNormalStereo(enc4)\tf", "contents": "DecodeViewNormalStereo(${1:enc4})"},
        { "trigger": "EncodeDepthNormal(depth,normal)\tf", "contents": "EncodeDepthNormal(${1:depth},${2:normal})"},
        { "trigger": "DecodeDepthNormal(enc,depth,normal)\tf", "contents": "DecodeDepthNormal(${1:enc},${2:depth},${3:normal})"},
        { "trigger": "UnpackNormalDXT5nm(packednormal)\tf", "contents": "UnpackNormalDXT5nm(${1:packednormal})"},
        { "trigger": "UnpackNormal(packednormal)\tf", "contents": "UnpackNormal(${1:packednormal})"},
        { "trigger": "Linear01Depth(z)\tf", "contents": "Linear01Depth(${1:z})"},
        { "trigger": "LinearEyeDepth(z)\tf", "contents": "LinearEyeDepth(${1:z})"},
        { "trigger": "TransformStereoScreenSpaceTex(uv,w)\tf", "contents": "TransformStereoScreenSpaceTex(${1:uv},${2:w})"},
        { "trigger": "UnityStereoScreenSpaceUVAdjustInternal(uv,scaleAndOffset)\tf", "contents": "UnityStereoScreenSpaceUVAdjustInternal(${1:uv},${2:scaleAndOffset})"},
        { "trigger": "UnityStereoTransformScreenSpaceTex(uv)\tf", "contents": "UnityStereoTransformScreenSpaceTex(${1:uv})"},
        { "trigger": "ComputeNonStereoScreenPos(pos)\tf", "contents": "ComputeNonStereoScreenPos(${1:pos})"},
        { "trigger": "ComputeScreenPos(pos)\tf", "contents": "ComputeScreenPos(${1:pos})"},
        { "trigger": "ComputeGrabScreenPos(pos)\tf", "contents": "ComputeGrabScreenPos(${1:pos})"},
        { "trigger": "UnityPixelSnap(pos)\tf", "contents": "UnityPixelSnap(${1:pos})"},
        { "trigger": "TransformViewToProjection(v)\tf", "contents": "TransformViewToProjection(${1:v})"},
        { "trigger": "UnityEncodeCubeShadowDepth(z)\tf", "contents": "UnityEncodeCubeShadowDepth(${1:z})"},
        { "trigger": "UnityDecodeCubeShadowDepth(vals)\tf", "contents": "UnityDecodeCubeShadowDepth(${1:vals})"},
        { "trigger": "UnityClipSpaceShadowCasterPos(vertex,normal)\tf", "contents": "UnityClipSpaceShadowCasterPos(${1:vertex},${2:normal})"},
        { "trigger": "UnityApplyLinearShadowBias(clipPos)\tf", "contents": "UnityApplyLinearShadowBias(${1:clipPos})"},
        { "trigger": "_TANGENT_TO_WORLD\tbuiltin-marco", "contents": "_TANGENT_TO_WORLD"},
        { "trigger": "_DETAIL\tbuiltin-marco", "contents": "_DETAIL"},
        { "trigger": "EXCEEDS_D3D9_SM3_MAX_SAMPLER_COUNT\tbuiltin-marco", "contents": "EXCEEDS_D3D9_SM3_MAX_SAMPLER_COUNT"},
        { "trigger": "GLOSSMAP\tbuiltin-marco", "contents": "GLOSSMAP"},
        { "trigger": "SPECULAR_HIGHLIGHTS\tbuiltin-marco", "contents": "SPECULAR_HIGHLIGHTS"},
        { "trigger": "JOIN2(a,b)\tf", "contents": "JOIN2(${1:a},${2:b})"},
        { "trigger": "JOIN(a,b)\tf", "contents": "JOIN(${1:a},${2:b})"},
        { "trigger": "UNIFORM_REFLECTIVITY\tbuiltin-marco", "contents": "UNIFORM_REFLECTIVITY"},
        { "trigger": "mainTexUV\tbuiltin-marco", "contents": "mainTexUV"},
        { "trigger": "Detail\tbuiltin-marco", "contents": "Detail"},
        { "trigger": "HueVariationAmount\tbuiltin-marco", "contents": "HueVariationAmount"},
        { "trigger": "SPEEDTREE_DATA_NORMAL\tbuiltin-marco", "contents": "SPEEDTREE_DATA_NORMAL"},
        { "trigger": "SPEEDTREE_COPY_NORMAL(to,from)\tf", "contents": "SPEEDTREE_COPY_NORMAL(${1:to},${2:from})"},
        { "trigger": "SPEEDTREE_COPY_FRAG(to,from)\tf", "contents": "SPEEDTREE_COPY_FRAG(${1:to},${2:from})"},
        { "trigger": "unityShadowCoord\tbuiltin-marco", "contents": "unityShadowCoord"},
        { "trigger": "unityShadowCoord2\tbuiltin-marco", "contents": "unityShadowCoord2"},
        { "trigger": "unityShadowCoord3\tbuiltin-marco", "contents": "unityShadowCoord3"},
        { "trigger": "unityShadowCoord4\tbuiltin-marco", "contents": "unityShadowCoord4"},
        { "trigger": "unityShadowCoord4x4\tbuiltin-marco", "contents": "unityShadowCoord4x4"},
        { "trigger": "SHADOW_COORDS(idx1)\tf", "contents": "SHADOW_COORDS(${1:idx1})"},
        { "trigger": "TRANSFER_SHADOW(a)\tf", "contents": "TRANSFER_SHADOW(${1:a})"},
        { "trigger": "SHADOW_ATTENUATION(a)\tf", "contents": "SHADOW_ATTENUATION(${1:a})"},
        { "trigger": "UNITY_LIGHT_ATTENUATION(destName,input,worldPos)\tf", "contents": "UNITY_LIGHT_ATTENUATION(${1:destName},${2:input},${3:worldPos})"},
        { "trigger": "LIGHTING_COORDS(idx1,idx2)\tf", "contents": "LIGHTING_COORDS(${1:idx1},${2:idx2})"},
        { "trigger": "TRANSFER_VERTEX_TO_FRAGMENT(a)\tf", "contents": "TRANSFER_VERTEX_TO_FRAGMENT(${1:a})"},
        { "trigger": "LIGHT_ATTENUATION(a)\tf", "contents": "LIGHT_ATTENUATION(${1:a})"},
        { "trigger": "UNITY_HANDLE_CORRECTLY_NEGATIVE_NDOTV\tbuiltin-marco", "contents": "UNITY_HANDLE_CORRECTLY_NEGATIVE_NDOTV"},
        { "trigger": "UNITY_STANDARD_USE_DITHER_MASK\tbuiltin-marco", "contents": "UNITY_STANDARD_USE_DITHER_MASK"},
        { "trigger": "UNITY_STANDARD_USE_SHADOW_UVS\tbuiltin-marco", "contents": "UNITY_STANDARD_USE_SHADOW_UVS"},
        { "trigger": "UNITY_STANDARD_USE_SHADOW_OUTPUT_STRUCT\tbuiltin-marco", "contents": "UNITY_STANDARD_USE_SHADOW_OUTPUT_STRUCT"},
        { "trigger": "SHADOW_JOIN2(a,b)\tf", "contents": "SHADOW_JOIN2(${1:a},${2:b})"},
        { "trigger": "SHADOW_JOIN(a,b)\tf", "contents": "SHADOW_JOIN(${1:a},${2:b})"},
        { "trigger": "SHADOW_ONEMINUSREFLECTIVITY\tbuiltin-marco", "contents": "SHADOW_ONEMINUSREFLECTIVITY"},
        { "trigger": "wind_cross(a,b)\tf", "contents": "wind_cross(${1:a},${2:b})"},
        { "trigger": "IN_VIEWDIR4PARALLAX(i)\tf", "contents": "IN_VIEWDIR4PARALLAX(${1:i})"},
        { "trigger": "IN_VIEWDIR4PARALLAX_FWDADD(i)\tf", "contents": "IN_VIEWDIR4PARALLAX_FWDADD(${1:i})"},
        { "trigger": "IN_WORLDPOS(i)\tf", "contents": "IN_WORLDPOS(${1:i})"},
        { "trigger": "IN_LIGHTDIR_FWDADD(i)\tf", "contents": "IN_LIGHTDIR_FWDADD(${1:i})"},
        { "trigger": "FRAGMENT_SETUP(x)\tf", "contents": "FRAGMENT_SETUP(${1:x})"},
        { "trigger": "FRAGMENT_SETUP_FWDADD(x)\tf", "contents": "FRAGMENT_SETUP_FWDADD(${1:x})"},
        { "trigger": "UNITY_SETUP_BRDF_INPUT\tbuiltin-marco", "contents": "UNITY_SETUP_BRDF_INPUT"},
        { "trigger": "IMPROVED_BAKED_AND_REALTIME_SHADOW_MIXING\tbuiltin-marco", "contents": "IMPROVED_BAKED_AND_REALTIME_SHADOW_MIXING"},
        { "trigger": "WIND_QUALITY_NONE\tbuiltin-marco", "contents": "WIND_QUALITY_NONE"},
        { "trigger": "WIND_QUALITY_FASTEST\tbuiltin-marco", "contents": "WIND_QUALITY_FASTEST"},
        { "trigger": "WIND_QUALITY_FAST\tbuiltin-marco", "contents": "WIND_QUALITY_FAST"},
        { "trigger": "WIND_QUALITY_BETTER\tbuiltin-marco", "contents": "WIND_QUALITY_BETTER"},
        { "trigger": "WIND_QUALITY_BEST\tbuiltin-marco", "contents": "WIND_QUALITY_BEST"},
        { "trigger": "WIND_QUALITY_PALM\tbuiltin-marco", "contents": "WIND_QUALITY_PALM"},
        { "trigger": "TERRAIN_SURFACE_OUTPUT\tbuiltin-marco", "contents": "TERRAIN_SURFACE_OUTPUT"},
        { "trigger": "UNITY_PASS_META\tbuiltin-marco", "contents": "UNITY_PASS_META"},
        { "trigger": "unity_BillboardCameraPosition\tbuiltin-marco", "contents": "unity_BillboardCameraPosition"},
        { "trigger": "unity_BillboardCameraXZAngle\tbuiltin-marco", "contents": "unity_BillboardCameraXZAngle"},
        { "trigger": "UNITY_SPECCUBE_LOD_EXPONENT\tbuiltin-marco", "contents": "UNITY_SPECCUBE_LOD_EXPONENT"},
        { "trigger": "UNITY_SPECCUBE_LOD_STEPS\tbuiltin-marco", "contents": "UNITY_SPECCUBE_LOD_STEPS"},
        { "trigger": "UNITY_CONSERVE_ENERGY\tbuiltin-marco", "contents": "UNITY_CONSERVE_ENERGY"},
        { "trigger": "UNITY_CONSERVE_ENERGY_MONOCHROME\tbuiltin-marco", "contents": "UNITY_CONSERVE_ENERGY_MONOCHROME"},
        { "trigger": "UNITY_SPECCUBE_BOX_PROJECTION\tbuiltin-marco", "contents": "UNITY_SPECCUBE_BOX_PROJECTION"},
        { "trigger": "UNITY_SPECCUBE_BLENDING\tbuiltin-marco", "contents": "UNITY_SPECCUBE_BLENDING"},
        { "trigger": "UNITY_SAMPLE_FULL_SH_PER_PIXEL\tbuiltin-marco", "contents": "UNITY_SAMPLE_FULL_SH_PER_PIXEL"},
        { "trigger": "UNITY_BRDF_GGX\tbuiltin-marco", "contents": "UNITY_BRDF_GGX"},
        { "trigger": "UNITY_TANGENT_ORTHONORMALIZE\tbuiltin-marco", "contents": "UNITY_TANGENT_ORTHONORMALIZE"},
        { "trigger": "UNITY_OPTIMIZE_TEXCUBELOD\tbuiltin-marco", "contents": "UNITY_OPTIMIZE_TEXCUBELOD"},
        { "trigger": "UNITY_STANDARD_SIMPLE\tbuiltin-marco", "contents": "UNITY_STANDARD_SIMPLE"},
        { "trigger": "UNITY_REQUIRE_FRAG_WORLDPOS\tbuiltin-marco", "contents": "UNITY_REQUIRE_FRAG_WORLDPOS"},
        { "trigger": "UNITY_DIRBASIS\tbuiltin-marco", "contents": "UNITY_DIRBASIS"},
        { "trigger": "glstate_matrix_projection\tbuiltin-marco", "contents": "glstate_matrix_projection"},
        { "trigger": "unity_MatrixV\tbuiltin-marco", "contents": "unity_MatrixV"},
        { "trigger": "unity_MatrixInvV\tbuiltin-marco", "contents": "unity_MatrixInvV"},
        { "trigger": "unity_MatrixVP\tbuiltin-marco", "contents": "unity_MatrixVP"},
        { "trigger": "unity_CameraProjection\tbuiltin-marco", "contents": "unity_CameraProjection"},
        { "trigger": "unity_CameraInvProjection\tbuiltin-marco", "contents": "unity_CameraInvProjection"},
        { "trigger": "unity_WorldToCamera\tbuiltin-marco", "contents": "unity_WorldToCamera"},
        { "trigger": "unity_CameraToWorld\tbuiltin-marco", "contents": "unity_CameraToWorld"},
        { "trigger": "_WorldSpaceCameraPos\tbuiltin-marco", "contents": "_WorldSpaceCameraPos"},
        { "trigger": "UNITY_MATRIX_P\tbuiltin-marco", "contents": "UNITY_MATRIX_P"},
        { "trigger": "UNITY_MATRIX_V\tbuiltin-marco", "contents": "UNITY_MATRIX_V"},
        { "trigger": "UNITY_MATRIX_I_V\tbuiltin-marco", "contents": "UNITY_MATRIX_I_V"},
        { "trigger": "UNITY_MATRIX_VP\tbuiltin-marco", "contents": "UNITY_MATRIX_VP"},
        { "trigger": "UNITY_MATRIX_M\tbuiltin-marco", "contents": "UNITY_MATRIX_M"},
        { "trigger": "UNITY_MATRIX_MVP\tbuiltin-marco", "contents": "UNITY_MATRIX_MVP"},
        { "trigger": "UNITY_MATRIX_MV\tbuiltin-marco", "contents": "UNITY_MATRIX_MV"},
        { "trigger": "UNITY_MATRIX_T_MV\tbuiltin-marco", "contents": "UNITY_MATRIX_T_MV"},
        { "trigger": "UNITY_MATRIX_IT_MV\tbuiltin-marco", "contents": "UNITY_MATRIX_IT_MV"},
        { "trigger": "UNITY_LIGHTMODEL_AMBIENT\tbuiltin-marco", "contents": "UNITY_LIGHTMODEL_AMBIENT"},
        { "trigger": "UNITY_LIGHT_PROBE_PROXY_VOLUME\tbuiltin-marco", "contents": "UNITY_LIGHT_PROBE_PROXY_VOLUME"},
        { "trigger": "UNITY_MATRIX_TEXTURE0\tbuiltin-marco", "contents": "UNITY_MATRIX_TEXTURE0"},
        { "trigger": "UNITY_MATRIX_TEXTURE1\tbuiltin-marco", "contents": "UNITY_MATRIX_TEXTURE1"},
        { "trigger": "UNITY_MATRIX_TEXTURE2\tbuiltin-marco", "contents": "UNITY_MATRIX_TEXTURE2"},
        { "trigger": "UNITY_MATRIX_TEXTURE3\tbuiltin-marco", "contents": "UNITY_MATRIX_TEXTURE3"},
        { "trigger": "UNITY_VERTEX_INPUT_INSTANCE_ID\tbuiltin-marco", "contents": "UNITY_VERTEX_INPUT_INSTANCE_ID"},
        { "trigger": "UNITY_TRANSFER_INSTANCE_ID(input,output)\tf", "contents": "UNITY_TRANSFER_INSTANCE_ID(${1:input},${2:output})"},
        { "trigger": "UNITY_SETUP_INSTANCE_ID(input)\tf", "contents": "UNITY_SETUP_INSTANCE_ID(${1:input})"},
        { "trigger": "UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output)\tf", "contents": "UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(${1:output})"},
        { "trigger": "UNITY_TRANSFER_VERTEX_OUTPUT_STEREO(input,output)\tf", "contents": "UNITY_TRANSFER_VERTEX_OUTPUT_STEREO(${1:input},${2:output})"},
        { "trigger": "UNITY_VERTEX_OUTPUT_STEREO\tbuiltin-marco", "contents": "UNITY_VERTEX_OUTPUT_STEREO"},
        { "trigger": "UNITY_MAX_INSTANCE_COUNT\tbuiltin-marco", "contents": "UNITY_MAX_INSTANCE_COUNT"},
        { "trigger": "UNITY_INSTANCED_ARRAY_SIZE\tbuiltin-marco", "contents": "UNITY_INSTANCED_ARRAY_SIZE"},
        { "trigger": "UNITY_INSTANCING_CBUFFER_START(name)\tf", "contents": "UNITY_INSTANCING_CBUFFER_START(${1:name})"},
        { "trigger": "UNITY_INSTANCING_CBUFFER_END\tbuiltin-marco", "contents": "UNITY_INSTANCING_CBUFFER_END"},
        { "trigger": "UNITY_DEFINE_INSTANCED_PROP(type,name)\tf", "contents": "UNITY_DEFINE_INSTANCED_PROP(${1:type},${2:name})"},
        { "trigger": "UNITY_ACCESS_INSTANCED_PROP(name)\tf", "contents": "UNITY_ACCESS_INSTANCED_PROP(${1:name})"},
        { "trigger": "unity_ObjectToWorld\tbuiltin-marco", "contents": "unity_ObjectToWorld"},
        { "trigger": "unity_WorldToObject\tbuiltin-marco", "contents": "unity_WorldToObject"},
        { "trigger": "unity_LODFade\tbuiltin-marco", "contents": "unity_LODFade"},
        { "trigger": "UNITY_BRDF_PBS\tbuiltin-marco", "contents": "UNITY_BRDF_PBS"},
        { "trigger": "UNITY_BRDF_PBS_LIGHTMAP_INDIRECT\tbuiltin-marco", "contents": "UNITY_BRDF_PBS_LIGHTMAP_INDIRECT"},
        { "trigger": "UNITY_BRDF_GI\tbuiltin-marco", "contents": "UNITY_BRDF_GI"},
        { "trigger": "UNITY_GLOSSY_ENV_FROM_SURFACE(x,s,data)\tf", "contents": "UNITY_GLOSSY_ENV_FROM_SURFACE(${1:x},${2:s},${3:data})"},
        { "trigger": "UNITY_GI(x,s,data)\tf", "contents": "UNITY_GI(${1:x},${2:s},${3:data})"},
        { "trigger": "UNITY_PI\tbuiltin-marco", "contents": "UNITY_PI"},
        { "trigger": "UNITY_TWO_PI\tbuiltin-marco", "contents": "UNITY_TWO_PI"},
        { "trigger": "UNITY_FOUR_PI\tbuiltin-marco", "contents": "UNITY_FOUR_PI"},
        { "trigger": "UNITY_INV_PI\tbuiltin-marco", "contents": "UNITY_INV_PI"},
        { "trigger": "UNITY_INV_TWO_PI\tbuiltin-marco", "contents": "UNITY_INV_TWO_PI"},
        { "trigger": "UNITY_INV_FOUR_PI\tbuiltin-marco", "contents": "UNITY_INV_FOUR_PI"},
        { "trigger": "UNITY_HALF_PI\tbuiltin-marco", "contents": "UNITY_HALF_PI"},
        { "trigger": "UNITY_INV_HALF_PI\tbuiltin-marco", "contents": "UNITY_INV_HALF_PI"},
        { "trigger": "unity_ColorSpaceGrey\tbuiltin-marco", "contents": "unity_ColorSpaceGrey"},
        { "trigger": "unity_ColorSpaceDouble\tbuiltin-marco", "contents": "unity_ColorSpaceDouble"},
        { "trigger": "unity_ColorSpaceDielectricSpec\tbuiltin-marco", "contents": "unity_ColorSpaceDielectricSpec"},
        { "trigger": "unity_ColorSpaceLuminance\tbuiltin-marco", "contents": "unity_ColorSpaceLuminance"},
        { "trigger": "SCALED_NORMAL\tbuiltin-marco", "contents": "SCALED_NORMAL"},
        { "trigger": "LIGHTMAP_RGBM_SCALE\tbuiltin-marco", "contents": "LIGHTMAP_RGBM_SCALE"},
        { "trigger": "EMISSIVE_RGBM_SCALE\tbuiltin-marco", "contents": "EMISSIVE_RGBM_SCALE"},
        { "trigger": "UNITY_SHOULD_SAMPLE_SH\tbuiltin-marco", "contents": "UNITY_SHOULD_SAMPLE_SH"},
        { "trigger": "TANGENT_SPACE_ROTATION\tbuiltin-marco", "contents": "TANGENT_SPACE_ROTATION"},
        { "trigger": "TRANSFORM_TEX(tex,name)\tf", "contents": "TRANSFORM_TEX(${1:tex},${2:name})"},
        { "trigger": "TRANSFORM_UV(idx)\tf", "contents": "TRANSFORM_UV(${1:idx})"},
        { "trigger": "UnityStereoScreenSpaceUVAdjust(x,y)\tf", "contents": "UnityStereoScreenSpaceUVAdjust(${1:x},${2:y})"},
        { "trigger": "DECODE_EYEDEPTH(i)\tf", "contents": "DECODE_EYEDEPTH(${1:i})"},
        { "trigger": "COMPUTE_EYEDEPTH(o)\tf", "contents": "COMPUTE_EYEDEPTH(${1:o})"},
        { "trigger": "COMPUTE_DEPTH_01\tbuiltin-marco", "contents": "COMPUTE_DEPTH_01"},
        { "trigger": "COMPUTE_VIEW_NORMAL\tbuiltin-marco", "contents": "COMPUTE_VIEW_NORMAL"},
        { "trigger": "V2F_SCREEN_TYPE\tbuiltin-marco", "contents": "V2F_SCREEN_TYPE"},
        { "trigger": "V2F_SHADOW_CASTER_NOPOS\tbuiltin-marco", "contents": "V2F_SHADOW_CASTER_NOPOS"},
        { "trigger": "TRANSFER_SHADOW_CASTER_NOPOS_LEGACY(o,opos)\tf", "contents": "TRANSFER_SHADOW_CASTER_NOPOS_LEGACY(${1:o},${2:opos})"},
        { "trigger": "TRANSFER_SHADOW_CASTER_NOPOS(o,opos)\tf", "contents": "TRANSFER_SHADOW_CASTER_NOPOS(${1:o},${2:opos})"},
        { "trigger": "SHADOW_CASTER_FRAGMENT(i)\tf", "contents": "SHADOW_CASTER_FRAGMENT(${1:i})"},
        { "trigger": "V2F_SHADOW_CASTER\tbuiltin-marco", "contents": "V2F_SHADOW_CASTER"},
        { "trigger": "TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)\tf", "contents": "TRANSFER_SHADOW_CASTER_NORMALOFFSET(${1:o})"},
        { "trigger": "TRANSFER_SHADOW_CASTER(o)\tf", "contents": "TRANSFER_SHADOW_CASTER(${1:o})"},
        { "trigger": "UNITY_OPAQUE_ALPHA(outputAlpha)\tf", "contents": "UNITY_OPAQUE_ALPHA(${1:outputAlpha})"},
        { "trigger": "UNITY_Z_0_FAR_FROM_CLIPSPACE(coord)\tf", "contents": "UNITY_Z_0_FAR_FROM_CLIPSPACE(${1:coord})"},
        { "trigger": "UNITY_CALC_FOG_FACTOR_RAW(coord)\tf", "contents": "UNITY_CALC_FOG_FACTOR_RAW(${1:coord})"},
        { "trigger": "UNITY_CALC_FOG_FACTOR(coord)\tf", "contents": "UNITY_CALC_FOG_FACTOR(${1:coord})"},
        { "trigger": "UNITY_FOG_COORDS_PACKED(idx,vectype)\tf", "contents": "UNITY_FOG_COORDS_PACKED(${1:idx},${2:vectype})"},
        { "trigger": "UNITY_FOG_COORDS(idx)\tf", "contents": "UNITY_FOG_COORDS(${1:idx})"},
        { "trigger": "UNITY_TRANSFER_FOG(o,outpos)\tf", "contents": "UNITY_TRANSFER_FOG(${1:o},${2:outpos})"},
        { "trigger": "UNITY_FOG_LERP_COLOR(col,fogCol,fogFac)\tf", "contents": "UNITY_FOG_LERP_COLOR(${1:col},${2:fogCol},${3:fogFac})"},
        { "trigger": "UNITY_APPLY_FOG_COLOR(coord,col,fogCol)\tf", "contents": "UNITY_APPLY_FOG_COLOR(${1:coord},${2:col},${3:fogCol})"},
        { "trigger": "UNITY_APPLY_FOG(coord,col)\tf", "contents": "UNITY_APPLY_FOG(${1:coord},${2:col})"},
        { "trigger": "UNITY_DITHER_CROSSFADE_COORDS\tbuiltin-marco", "contents": "UNITY_DITHER_CROSSFADE_COORDS"},
        { "trigger": "UNITY_DITHER_CROSSFADE_COORDS_IDX(idx)\tf", "contents": "UNITY_DITHER_CROSSFADE_COORDS_IDX(${1:idx})"},
        { "trigger": "UNITY_TRANSFER_DITHER_CROSSFADE(o,v)\tf", "contents": "UNITY_TRANSFER_DITHER_CROSSFADE(${1:o},${2:v})"},
        { "trigger": "UNITY_TRANSFER_DITHER_CROSSFADE_HPOS(o,hpos)\tf", "contents": "UNITY_TRANSFER_DITHER_CROSSFADE_HPOS(${1:o},${2:hpos})"},
        { "trigger": "UNITY_APPLY_DITHER_CROSSFADE(i)\tf", "contents": "UNITY_APPLY_DITHER_CROSSFADE(${1:i})"},
        { "trigger": "V2F_SHADOW_COLLECTOR\tbuiltin-marco", "contents": "V2F_SHADOW_COLLECTOR"},
        { "trigger": "TRANSFER_SHADOW_COLLECTOR(o)\tf", "contents": "TRANSFER_SHADOW_COLLECTOR(${1:o})"},
        { "trigger": "SAMPLE_SHADOW_COLLECTOR_SHADOW(coord)\tf", "contents": "SAMPLE_SHADOW_COLLECTOR_SHADOW(${1:coord})"},
        { "trigger": "COMPUTE_SHADOW_COLLECTOR_SHADOW(i,weights,shadowFade)\tf", "contents": "COMPUTE_SHADOW_COLLECTOR_SHADOW(${1:i},${2:weights},${3:shadowFade})"},
        { "trigger": "SHADOW_COLLECTOR_FRAGMENT(i)\tf", "contents": "SHADOW_COLLECTOR_FRAGMENT(${1:i})"},
        { "trigger": "UNITY_TRANSFER_DEPTH(oo)\tf", "contents": "UNITY_TRANSFER_DEPTH(${1:oo})"},
        { "trigger": "UNITY_OUTPUT_DEPTH(i)\tf", "contents": "UNITY_OUTPUT_DEPTH(${1:i})"},
        { "trigger": "_ShadowMapTexture\tbuiltin-variable", "contents": "_ShadowMapTexture"},
        { "trigger": "_LightTexture0\tbuiltin-variable", "contents": "_LightTexture0"},
        { "trigger": "_LightTextureB0\tbuiltin-variable", "contents": "_LightTextureB0"},
        { "trigger": "unity_DeltaTime\tbuiltin-variable", "contents": "unity_DeltaTime"},
        { "trigger": "_ProjectionParams\tbuiltin-variable", "contents": "_ProjectionParams"},
        { "trigger": "_ScreenParams\tbuiltin-variable", "contents": "_ScreenParams"},
        { "trigger": "_ZBufferParams\tbuiltin-variable", "contents": "_ZBufferParams"},
        { "trigger": "unity_OrthoParams\tbuiltin-variable", "contents": "unity_OrthoParams"},
        { "trigger": "unity_CameraWorldClipPlanes\tbuiltin-variable", "contents": "unity_CameraWorldClipPlanes"},
        { "trigger": "_WorldSpaceLightPos0\tbuiltin-variable", "contents": "_WorldSpaceLightPos0"},
        { "trigger": "_LightPositionRange\tbuiltin-variable", "contents": "_LightPositionRange"},
        { "trigger": "unity_4LightPosX0\tbuiltin-variable", "contents": "unity_4LightPosX0"},
        { "trigger": "unity_4LightPosY0\tbuiltin-variable", "contents": "unity_4LightPosY0"},
        { "trigger": "unity_4LightPosZ0\tbuiltin-variable", "contents": "unity_4LightPosZ0"},
        { "trigger": "unity_4LightAtten0\tbuiltin-variable", "contents": "unity_4LightAtten0"},
        { "trigger": "unity_LightColor\tbuiltin-variable", "contents": "unity_LightColor"},
        { "trigger": "unity_LightAtten\tbuiltin-variable", "contents": "unity_LightAtten"},
        { "trigger": "unity_SHAr\tbuiltin-variable", "contents": "unity_SHAr"},
        { "trigger": "unity_SHAg\tbuiltin-variable", "contents": "unity_SHAg"},
        { "trigger": "unity_SHAb\tbuiltin-variable", "contents": "unity_SHAb"},
        { "trigger": "unity_SHBr\tbuiltin-variable", "contents": "unity_SHBr"},
        { "trigger": "unity_SHBg\tbuiltin-variable", "contents": "unity_SHBg"},
        { "trigger": "unity_SHBb\tbuiltin-variable", "contents": "unity_SHBb"},
        { "trigger": "unity_SHC\tbuiltin-variable", "contents": "unity_SHC"},
        { "trigger": "unity_ShadowSplitSpheres\tbuiltin-variable", "contents": "unity_ShadowSplitSpheres"},
        { "trigger": "unity_ShadowSplitSqRadii\tbuiltin-variable", "contents": "unity_ShadowSplitSqRadii"},
        { "trigger": "unity_LightShadowBias\tbuiltin-variable", "contents": "unity_LightShadowBias"},
        { "trigger": "_LightSplitsNear\tbuiltin-variable", "contents": "_LightSplitsNear"},
        { "trigger": "_LightSplitsFar\tbuiltin-variable", "contents": "_LightSplitsFar"},
        { "trigger": "unity_WorldToShadow\tbuiltin-variable", "contents": "unity_WorldToShadow"},
        { "trigger": "_LightShadowData\tbuiltin-variable", "contents": "_LightShadowData"},
        { "trigger": "unity_ShadowFadeCenterAndType\tbuiltin-variable", "contents": "unity_ShadowFadeCenterAndType"},
        { "trigger": "glstate_matrix_mvp\tbuiltin-variable", "contents": "glstate_matrix_mvp"},
        { "trigger": "glstate_matrix_modelview0\tbuiltin-variable", "contents": "glstate_matrix_modelview0"},
        { "trigger": "glstate_matrix_invtrans_modelview0\tbuiltin-variable", "contents": "glstate_matrix_invtrans_modelview0"},
        { "trigger": "unity_WorldTransformParams\tbuiltin-variable", "contents": "unity_WorldTransformParams"},
        { "trigger": "unity_StereoMatrixP\tbuiltin-variable", "contents": "unity_StereoMatrixP"},
        { "trigger": "unity_StereoMatrixV\tbuiltin-variable", "contents": "unity_StereoMatrixV"},
        { "trigger": "unity_StereoMatrixInvV\tbuiltin-variable", "contents": "unity_StereoMatrixInvV"},
        { "trigger": "unity_StereoMatrixVP\tbuiltin-variable", "contents": "unity_StereoMatrixVP"},
        { "trigger": "unity_StereoCameraProjection\tbuiltin-variable", "contents": "unity_StereoCameraProjection"},
        { "trigger": "unity_StereoCameraInvProjection\tbuiltin-variable", "contents": "unity_StereoCameraInvProjection"},
        { "trigger": "unity_StereoWorldToCamera\tbuiltin-variable", "contents": "unity_StereoWorldToCamera"},
        { "trigger": "unity_StereoCameraToWorld\tbuiltin-variable", "contents": "unity_StereoCameraToWorld"},
        { "trigger": "unity_StereoWorldSpaceCameraPos\tbuiltin-variable", "contents": "unity_StereoWorldSpaceCameraPos"},
        { "trigger": "unity_StereoScaleOffset\tbuiltin-variable", "contents": "unity_StereoScaleOffset"},
        { "trigger": "glstate_matrix_transpose_modelview0\tbuiltin-variable", "contents": "glstate_matrix_transpose_modelview0"},
        { "trigger": "glstate_lightmodel_ambient\tbuiltin-variable", "contents": "glstate_lightmodel_ambient"},
        { "trigger": "unity_AmbientSky\tbuiltin-variable", "contents": "unity_AmbientSky"},
        { "trigger": "unity_AmbientEquator\tbuiltin-variable", "contents": "unity_AmbientEquator"},
        { "trigger": "unity_AmbientGround\tbuiltin-variable", "contents": "unity_AmbientGround"},
        { "trigger": "unity_IndirectSpecColor\tbuiltin-variable", "contents": "unity_IndirectSpecColor"},
        { "trigger": "unity_FogColor\tbuiltin-variable", "contents": "unity_FogColor"},
        { "trigger": "unity_FogParams\tbuiltin-variable", "contents": "unity_FogParams"},
        { "trigger": "unity_LightmapST\tbuiltin-variable", "contents": "unity_LightmapST"},
        { "trigger": "unity_DynamicLightmapST\tbuiltin-variable", "contents": "unity_DynamicLightmapST"},
        { "trigger": "unity_SpecCube0_BoxMax\tbuiltin-variable", "contents": "unity_SpecCube0_BoxMax"},
        { "trigger": "unity_SpecCube0_BoxMin\tbuiltin-variable", "contents": "unity_SpecCube0_BoxMin"},
        { "trigger": "unity_SpecCube0_ProbePosition\tbuiltin-variable", "contents": "unity_SpecCube0_ProbePosition"},
        { "trigger": "unity_SpecCube0_HDR\tbuiltin-variable", "contents": "unity_SpecCube0_HDR"},
        { "trigger": "unity_SpecCube1_BoxMax\tbuiltin-variable", "contents": "unity_SpecCube1_BoxMax"},
        { "trigger": "unity_SpecCube1_BoxMin\tbuiltin-variable", "contents": "unity_SpecCube1_BoxMin"},
        { "trigger": "unity_SpecCube1_ProbePosition\tbuiltin-variable", "contents": "unity_SpecCube1_ProbePosition"},
        { "trigger": "unity_SpecCube1_HDR\tbuiltin-variable", "contents": "unity_SpecCube1_HDR"},
        { "trigger": "unity_ProbeVolumeParams\tbuiltin-variable", "contents": "unity_ProbeVolumeParams"},
        { "trigger": "unity_ProbeVolumeWorldToObject\tbuiltin-variable", "contents": "unity_ProbeVolumeWorldToObject"},
        { "trigger": "unity_ProbeVolumeSizeInv\tbuiltin-variable", "contents": "unity_ProbeVolumeSizeInv"},
        { "trigger": "unity_ProbeVolumeMin\tbuiltin-variable", "contents": "unity_ProbeVolumeMin"},
        { "trigger": "_LightColor0\tbuiltin-variable", "contents": "_LightColor0"},
        { "trigger": "_SpecColor\tbuiltin-variable", "contents": "_SpecColor"},
    ]
}
