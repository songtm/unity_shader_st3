
{
	"scope": "source.lua",
	"completions": 
	[
		["assert(v[,message])", "assert(${1:v}${2:[,message]})" ], 
		["collectgarbage([opt[,arg]])", "collectgarbage(${1:[opt}${2:[,arg]]})" ], 
		["dofile([filename])", "dofile(${1:[filename]})" ], 
		["error(message[,level])", "error(${1:message}${2:[,level]})" ], 
		["getfenv([f])", "getfenv(${1:[f]})" ], 
		["getmetatable(object)", "getmetatable(${1:object})" ], 
		["ipairs(t)", "ipairs(${1:t})" ], 
		["load(func[,chunkname])", "load(${1:func}${2:[,chunkname]})" ], 
		["loadfile([filename])", "loadfile(${1:[filename]})" ], 
		["loadstring(string[,chunkname])", "loadstring(${1:string}${2:[,chunkname]})" ], 
		["module(name[,···])", "module(${1:name}${2:[,···]})" ], 
		["next(table[,index])", "next(${1:table}${2:[,index]})" ], 
		["pairs(t)", "pairs(${1:t})" ], 
		["pcall(f,arg1,···)", "pcall(${1:f}, ${2:arg1}, ${3:···})" ], 
		["print(···)", "print(${1:···})" ], 
		["rawequal(v1,v2)", "rawequal(${1:v1}, ${2:v2})" ], 
		["rawget(table,index)", "rawget(${1:table}, ${2:index})" ], 
		["rawset(table,index,value)", "rawset(${1:table}, ${2:index}, ${3:value})" ], 
		["require(modname)", "require(${1:modname})" ], 
		["select(index,···)", "select(${1:index}, ${2:···})" ], 
		["setfenv(f,table)", "setfenv(${1:f}, ${2:table})" ], 
		["setmetatable(table,metatable)", "setmetatable(${1:table}, ${2:metatable})" ], 
		["tonumber(e[,base])", "tonumber(${1:e}${2:[,base]})" ], 
		["tostring(e)", "tostring(${1:e})" ], 
		["type(v)", "type(${1:v})" ], 
		["unpack(list[,i[,j]])", "unpack(${1:list}${2:[,i}${3:[,j]]})" ], 
		["xpcall(f,err)", "xpcall(${1:f}, ${2:err})" ], 
		["coroutine.create(f)", "coroutine.create(${1:f})" ], 
		["coroutine.resume(co[,val1,···])", "coroutine.resume(${1:co}${2:[,val1,···]})" ], 
		["coroutine.running()", "coroutine.running()" ], 
		["coroutine.status(co)", "coroutine.status(${1:co})" ], 
		["coroutine.wrap(f)", "coroutine.wrap(${1:f})" ], 
		["coroutine.yield(···)", "coroutine.yield(${1:···})" ], 
		["debug.debug()", "debug.debug()" ], 
		["debug.getfenv(o)", "debug.getfenv(${1:o})" ], 
		["debug.gethook([thread])", "debug.gethook(${1:[thread]})" ], 
		["debug.getinfo([thread,]function[,what])", "debug.getinfo(${1:[thread,]function}${2:[,what]})" ], 
		["debug.getlocal([thread,]level,local)", "debug.getlocal(${1:[thread,]level,local})" ], 
		["debug.getmetatable(object)", "debug.getmetatable(${1:object})" ], 
		["debug.getregistry()", "debug.getregistry()" ], 
		["debug.getupvalue(func,up)", "debug.getupvalue(${1:func}, ${2:up})" ], 
		["debug.setfenv(object,table)", "debug.setfenv(${1:object}, ${2:table})" ], 
		["debug.sethook([thread,]hook,mask[,count])", "debug.sethook(${1:[thread,]hook,mask}${2:[,count]})" ], 
		["debug.setlocal([thread,]level,local,value)", "debug.setlocal(${1:[thread,]level,local,value})" ], 
		["debug.setmetatable(object,table)", "debug.setmetatable(${1:object}, ${2:table})" ], 
		["debug.setupvalue(func,up,value)", "debug.setupvalue(${1:func}, ${2:up}, ${3:value})" ], 
		["debug.traceback([thread,][message[,level]])", "debug.traceback(${1:[thread,]}${2:[message}${3:[,level]]})" ], 
		["file:close()", "file:close()" ], 
		["file:flush()", "file:flush()" ], 
		["file:lines()", "file:lines()" ], 
		["file:read(···)", "file:read(${1:···})" ], 
		["file:seek([whence][,offset])", "file:seek(${1:[whence]}${2:[,offset]})" ], 
		["file:setvbuf(mode[,size])", "file:setvbuf(${1:mode}${2:[,size]})" ], 
		["file:write(···)", "file:write(${1:···})" ], 
		["io.close([file])", "io.close(${1:[file]})" ], 
		["io.flush()", "io.flush()" ], 
		["io.input([file])", "io.input(${1:[file]})" ], 
		["io.lines([filename])", "io.lines(${1:[filename]})" ], 
		["io.open(filename[,mode])", "io.open(${1:filename}${2:[,mode]})" ], 
		["io.output([file])", "io.output(${1:[file]})" ], 
		["io.popen(prog[,mode])", "io.popen(${1:prog}${2:[,mode]})" ], 
		["io.read(···)", "io.read(${1:···})" ], 
		["io.tmpfile()", "io.tmpfile()" ], 
		["io.type(obj)", "io.type(${1:obj})" ], 
		["io.write(···)", "io.write(${1:···})" ], 
		["math.abs(x)", "math.abs(${1:x})" ], 
		["math.acos(x)", "math.acos(${1:x})" ], 
		["math.asin(x)", "math.asin(${1:x})" ], 
		["math.atan(x)", "math.atan(${1:x})" ], 
		["math.atan2(y,x)", "math.atan2(${1:y}, ${2:x})" ], 
		["math.ceil(x)", "math.ceil(${1:x})" ], 
		["math.cos(x)", "math.cos(${1:x})" ], 
		["math.cosh(x)", "math.cosh(${1:x})" ], 
		["math.deg(x)", "math.deg(${1:x})" ], 
		["math.exp(x)", "math.exp(${1:x})" ], 
		["math.floor(x)", "math.floor(${1:x})" ], 
		["math.fmod(x,y)", "math.fmod(${1:x}, ${2:y})" ], 
		["math.frexp(x)", "math.frexp(${1:x})"],
		["math.huge", "math.huge"], 
		["math.ldexp(m,e)", "math.ldexp(${1:m}, ${2:e})" ], 
		["math.log(x)", "math.log(${1:x})" ], 
		["math.log10(x)", "math.log10(${1:x})" ], 
		["math.max(x,···)", "math.max(${1:x}, ${2:···})" ], 
		["math.min(x,···)", "math.min(${1:x}, ${2:···})" ], 
		["math.modf(x)", "math.modf(${1:x})"],
		["math.pi", "math.pi"],
		["math.pow(x,y)", "math.pow(${1:x}, ${2:y})" ], 
		["math.rad(x)", "math.rad(${1:x})" ], 
		["math.random([m[,n]])", "math.random(${1:[m}${2:[,n]]})" ], 
		["math.randomseed(x)", "math.randomseed(${1:x})" ], 
		["math.sin(x)", "math.sin(${1:x})" ], 
		["math.sinh(x)", "math.sinh(${1:x})" ], 
		["math.sqrt(x)", "math.sqrt(${1:x})" ], 
		["math.tan(x)", "math.tan(${1:x})" ], 
		["math.tanh(x)", "math.tanh(${1:x})" ], 
		["os.clock()", "os.clock()" ], 
		["os.date([format[,time]])", "os.date(${1:[format}${2:[,time]]})" ], 
		["os.difftime(t2,t1)", "os.difftime(${1:t2}, ${2:t1})" ], 
		["os.execute([command])", "os.execute(${1:[command]})" ], 
		["os.exit([code])", "os.exit(${1:[code]})" ], 
		["os.getenv(varname)", "os.getenv(${1:varname})" ], 
		["os.remove(filename)", "os.remove(${1:filename})" ], 
		["os.rename(oldname,newname)", "os.rename(${1:oldname}, ${2:newname})" ], 
		["os.setlocale(locale[,category])", "os.setlocale(${1:locale}${2:[,category]})" ], 
		["os.time([table])", "os.time(${1:[table]})" ], 
		["os.tmpname()", "os.tmpname()"],
		["package.cpath","package.cpath"],
		["package.loaded","package.loaded"],
		["package.loaders", "package.loaders",],
		["package.loadlib(libname,funcname)", "package.loadlib(${1:libname}, ${2:funcname})"],
		["package.path","package.path"],
		["package.preload", "package.preload",],
		["package.seeall(module)", "package.seeall(${1:module})" ], 
		["string.byte(s[,i[,j]])", "string.byte(${1:s}${2:[,i}${3:[,j]]})" ], 
		["string.char(···)", "string.char(${1:···})" ], 
		["string.dump(function)", "string.dump(${1:function})" ], 
		["string.find(s,pattern[,init[,plain]])", "string.find(${1:s}, ${2:pattern}${3:[,init}${4:[,plain]]})" ], 
		["string.format(formatstring,···)", "string.format(${1:formatstring}, ${2:···})" ], 
		["string.gmatch(s,pattern)", "string.gmatch(${1:s}, ${2:pattern})" ], 
		["string.gsub(s,pattern,repl[,n])", "string.gsub(${1:s}, ${2:pattern}, ${3:repl}${4:[,n]})" ], 
		["string.len(s)", "string.len(${1:s})" ], 
		["string.lower(s)", "string.lower(${1:s})" ], 
		["string.match(s,pattern[,init])", "string.match(${1:s}, ${2:pattern}${3:[,init]})" ], 
		["string.rep(s,n)", "string.rep(${1:s}, ${2:n})" ], 
		["string.reverse(s)", "string.reverse(${1:s})" ], 
		["string.sub(s,i[,j])", "string.sub(${1:s}, ${2:i}${3:[,j]})" ], 
		["string.upper(s)", "string.upper(${1:s})" ], 
		["table.concat(table[,sep[,i[,j]]])", "table.concat(${1:table}${2:[,sep}${3:[,i}${4:[,j]]]})" ], 
		["table.insert(table,[pos,]value)", "table.insert(${1:table}, ${2:[pos,]value})" ], 
		["table.maxn(table)", "table.maxn(${1:table})" ], 
		["table.remove(table[,pos])", "table.remove(${1:table}${2:[,pos]})" ], 
		["table.sort(table[,comp])", "table.sort(${1:table}${2:[,comp]})"],
	]
}
